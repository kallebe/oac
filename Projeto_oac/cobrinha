.data
	# cor_vermelha   0x07070707
	# cor_verde      0x62626262
	
	orig_top_esq: .word 0xFF000140 #representa o topo a esquerda
	orig_top_dir: .word 0XFF00063C#representa o topo a direita
	orig_bot_esq: .word 0xFF0125C0 #representa o topo a esquerda
	orig_bot_dir: .word 0xFF012BFC #representa o topo a direita
	
	teto_cobra_esq: .word 	0xFF00B99C
	teto_cobra_dir: .word 	0xFF010AE4	
	chao_cobra_esq: .word 	0xFF0114DC	
	chao_cobra_dir: .word 	0xFF0114E4
	
	comida_centro1: .word 	0xFF00B99C
	comida_centro2: .word 	0xff010ae0
	comida_centro3: .word 	0xff010c20
	comida_centro4: .word 	0xff010c1c
	teste: .word 0xFF012ABC
	
.text
MAIN:
	la tp,exceptionHandling	# carrega em tp o endere?o base das rotinas do sistema ECALL	
	li s0, 1		# contador do tamanho da cobra
	li s4, 0		# pontos
	
	addi sp, sp, 2040  #alocar espaço na pilha
	addi sp, sp, -2040  #desalocar espaço na pilha
	li t5, 0x62626262	#definir cor da borda --- t5 representa o pixel de cor nesse jogo
	
	jal ra, PREENCHER_BORDAS
	#jal ra, GERAR_COMIDA
	jal ra, LOOP_JOGO
	ret  #retorno principal
	
LOOP_JOGO:
	jal VERIFICAR_TECLA
	j LOOP_JOGO			# volta ao loop
	
PREENCHER_BORDAS:
	mv s5, ra #salvar ra em s0
	#preencher Topo
	la t0, orig_top_esq
	la t1, orig_top_dir
	lw t0,0(t0)
	lw t1,0(t1)
	jal ra, PREENCHER_BORDAS_TOP
	#preencher Bottom
	la t0, orig_bot_esq
	la t1, orig_bot_dir
	lw t0,0(t0)
	lw t1,0(t1)
	jal ra, PREENCHER_BORDAS_BOT
	#preencher lateral esquerda
	la t0, orig_top_esq
	la t1, orig_bot_esq
	lw t0,0(t0)
	lw t1,0(t1)
	jal ra, PREENCHER_BORDAS_LEFT
	#preencher lateral direita
	la t0, orig_top_dir
	la t1, orig_bot_dir
	lw t0,0(t0)
	lw t1,0(t1)
	jal ra, PREENCHER_BORDAS_RIGHT
	mv ra, s5
	ret
	
PREENCHER_BORDAS_TOP:
	beq t0, t1, FIM
	sw t5, 0(t0)
	addi t0, t0, 4
	j PREENCHER_BORDAS_TOP
	
PREENCHER_BORDAS_BOT:
	beq t0, t1, FIM
	sw t5, 0(t0)
	addi t0, t0, 4
	j PREENCHER_BORDAS_BOT
	
PREENCHER_BORDAS_LEFT:
	beq t0, t1, FIM
	sw t5, 0(t0)
	addi t0, t0, 320
	j PREENCHER_BORDAS_LEFT
	
PREENCHER_BORDAS_RIGHT:
	beq t0, t1, FIM
	sw t5, 0(t0)
	addi t0, t0, 320
	j PREENCHER_BORDAS_RIGHT
	
PREENCHER_COORDENADAS:
	
	
GERAR_COMIDA:	
	la t0, comida_centro1
	lw t0, 0(t0)
	sw t5, 0(t0)
	la t0, comida_centro2
	lw t0, 0(t0)
	sw t5, 0(t0)
	la t0, comida_centro3
	lw t0, 0(t0)
	sw t5, 0(t0)
	la t0, comida_centro4
	lw t0, 0(t0)
	sw t5, 0(t0)
	mv ra, s5
	ret
	
VERIFICAR_LIMITES:
	lw t0, 0(s0)
	li t1, 0  #marca t1 como verdadeiro
	beq t0, t5, FIM #compara a cor armazenada em t0 com a cor armazenada em t5
	li t1, 1  #marca t1 como falso
	ret
	
### Verifica se há tecla pressionada	
VERIFICAR_TECLA:	
	li t1,0xFF200000		# carrega o endere?o de controle do KDMMIO
	lw t0,0(t1)			# Le bit de Controle Teclado
	andi t0,t0,0x0001		# mascara o bit menos significativo
   	beq t0,zero,FIM   	   	# Se n?o h? tecla pressionada ent?o vai para FIM
  	lw t2,4(t1)  			# le o valor da tecla tecla
  	j DEFINE_DIRECAO
  	
FIM:
	ret #retornar
	
.include"SYSTEMv17b.s"
.include "include/direcao.s"
